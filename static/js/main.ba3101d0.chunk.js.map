{"version":3,"sources":["config/config.js","App.js","serviceWorker.js","index.js"],"names":["url","App","useState","isInput","setInput","country","setCountry","selectedBrand","setBrand","brandFilter","setBrandFilter","brands","fetch","then","res","json","data","className","type","class","value","brand","name","onChange","e","target","text","toLowerCase","substr","length","push","autocomplete","autofocus","map","i","key","onClick","console","log","alias","selectBrand","src","alt","role","aria-label","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba3101d0.chunk.js","sourcesContent":["export const url = {\n    baseUrl: 'https://wowapps.github.io/madeinbharat/',\n    brandsArray : 'data-store/index.json'\n}","import React, { useState } from 'react';\nimport { url } from './config/config';\nimport './App.css';\n\nfunction App() {\n  const [isInput, setInput] = useState(false);\n  const [country, setCountry] = useState('');\n  const [selectedBrand, setBrand] = useState('');\n  const [brandFilter, setBrandFilter] = useState([]);\n  let brands = [];\n\n  fetch(url.baseUrl + url.brandsArray).then(\n    res => res.json()\n  ).then((data) => {\n    brands = data;\n  })\n\n  return (\n    <div className='container-fluid'>\n      <div className='row searchbar'>\n        <div className=\"col-sm-12 col-md-6\">\n          <div className=\"row\">\n            <span className=\"float-right\">कौन सा देश बनाता है?</span>\n          </div>\n          <div className='row'>\n            <span className=\"float-right\">Which country makes?</span>\n          </div>\n        </div>\n        <div className=\"col-sm-12 col-md-6\">\n          <input type=\"text\" class=\"search_input float-left\" value={selectedBrand.brand} name=\"search\" onChange={findProduct} autocomplete=\"off\" autofocus=\"\" />\n        </div>\n      </div>\n      {isInput ? <div>\n        <ul>\n          {\n            brandFilter.length > 0 ? <div>\n              {brandFilter.map((brand, i) => {\n                return (\n                  <li key={i}>\n                    <button value={brand} onClick={(e) => selectBrand(e)}>\n                      {brand}\n                    </button>\n                  </li>\n                )\n              }\n              )}\n            </div> :\n              <li className='notListed'>Not Listed</li>\n          }\n        </ul>\n      </div> : ''}\n\n      <div className=\"row main-content\">\n        <div className={`inner`}>\n          <div class={` ${country ? 'active' : 'inactive'}`}>\n            <div class=\"card\">\n              {\n                country === 'india' ?\n                  <img class=\"card-img-top\" src=\"./india-flag.svg\" alt=\"Made In India\" />\n                  :\n                  (country === 'china' ?\n                    <img class=\"card-img-top\" src=\"./china-flag.svg\" alt=\"Made In India\" />\n                    :\n                    <img class=\"card-img-top\" src=\"./somalia-flag.svg\" alt=\"Made In India\" />\n                  )\n              }\n\n              <div class=\"card-body\">\n                <p class=\"card-text\">{`${country === 'india' ? 'भारत' : (country === 'china' ? 'चीन' : 'अन्य देश')} में निर्मित`}</p>\n                <p className=\"card-text\">{`Made in ${country}`}</p>\n                {/* <p className=\"card-text\">{`Deals in -`}{\n                  isGroups() && selectedBrand.groups.map(group => {\n                  return(<span>{`${group}, `}</span>)\n                  })\n                }</p> */}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <footer class=\"\">\n        <div class=\"container\">\n          <div class=\"btn-group-vertical\" role=\"group\" aria-label=\"Button group with nested dropdown\">\n            <button type=\"button\" class=\"btn btn-secondary\">\n              <a class=\"footer-link\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSd4NnHXtvv7DpY93-6ZcwUk1tkvL78eT6tSyDNDdT3lY2j0hw/viewform\" target=\"_blank\" rel=\"noopener noreferrer\">किसी भी गलत जानकारी की सूचना दें (Report any incorrect data)</a>\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary\">\n              <a class=\"footer-link\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSfOLjHq0Crnm_6izV9N2WNO9NP9DwYttsZKg9Iqa3j-a5LYOA/viewform\" target=\"_blank\" rel=\"noopener noreferrer\">कंपनी / उत्पाद जोड़ने का अनुरोध (Company/Product add request)</a>\n            </button>\n            <button type=\"button\" class=\"btn btn-secondary\">\n              <a class=\"footer-link\" href=\"https://docs.google.com/forms/d/e/1FAIpQLSfckly2X5CcO-1cEKMBVWDJtJZvjrPW3ivaBb3zvHCCm3bbmg/viewform\" target=\"_blank\" rel=\"noopener noreferrer\">सुझाव या शिकायत दर्ज करें (Suggestions or Complaints)</a>\n            </button>\n          </div>\n        </div>\n      </footer>\n\n    </div>\n  );\n\n  // function isGroups(){\n  //   if ('key' in selectedBrand && 'groups' in selectedBrand && selectedBrand.groups.length>0){\n  //     return true;\n  //   }else{\n  //     return false;\n  //   }\n  // }\n\n  function selectBrand(e) {\n    fetch(url.baseUrl + \"data-store/brand-\" + e.target.value.toLowerCase() + \".json\").then(\n      res => res.json()\n    ).then((data) => {\n      console.log(data);\n      if(data.alias !== \"\"){\n        fetch(url.baseUrl + \"data-store/brand-\" + data.alias.toLowerCase() + \".json\").then(\n          res => res.json()\n        ).then(\n          data => {\n            setBrand(data);\n            setCountry(data.country);\n          }\n        )\n      }else{\n        console.log(data);\n        setBrand(data);\n        setCountry(data.country);\n    }\n  })\n    setInput(false);\n  }\n\n  function findProduct(e) {\n    setBrand(e.target.value);\n    let brandFilter = [];\n    if (e.target.value) {\n      setInput(true);\n      setCountry('');\n    } else { setInput(false) }\n    let text = e.target.value.toLowerCase();\n    for (let brand of brands) {\n      if (text === brand.substr(0, text.length)) {\n        brandFilter.push(brand);\n      }\n    }\n    setBrandFilter(brandFilter);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n // for (let i = 0; i < chinese.length; i++) {\n    //   var n = text.search(chinese[i]);\n    //   result.push(n);\n    // }\n    // setChinese(result.includes(0));\n"],"sourceRoot":""}